package com.spacio.fm.controller.activity;

import java.util.logging.Logger;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.spacio.crx.dto.PrimaryKey;
import com.spacio.crx.dto.ResponseDTO;
import com.spacio.fm.core.activity.bo.ResidentOrderBO;
import com.spacio.fm.core.activity.dto.CreateResidentOrderDTO;
import com.spacio.fm.core.activity.dto.FollowUpDTO;
import com.spacio.fm.core.activity.dto.ResidentOrderDTO;
import com.spacio.fm.exception.BadRequestException;

@RestController
@RequestMapping("/api/resorders")
public class ResidentOrderController 
{
	
	  private static final Logger logger = Logger.getLogger(ResidentOrderController.class.getName());
		
		
		@Value("${provider}")
	    private String provider;
		
		
		@Autowired
		private ResidentOrderBO residentOrderBO;
		
	
	
	public ResidentOrderController()
	{
		logger.info(" -- ResidentOrderController() -- ");
	}
	
	
	@PostMapping	
	public ResponseEntity<?> createResidentOrder(HttpServletRequest request, @Valid @RequestBody CreateResidentOrderDTO order)
	{
		
		logger.info(" -- createResidentOrder -- ");
		
		ResponseDTO response = new ResponseDTO();
		
		try
		{
			String provider = request.getHeader("provider");
			String tenantId = request.getHeader("tenant-id");
			String userId = request.getHeader("user-id");
			String currentEstateXri = request.getHeader("current-estate-xri");

			logger.info(" --- provider : " + provider + " ;; segment : " + tenantId + ";; userId : " + userId);
			
			residentOrderBO.setCredentials(provider, tenantId, userId);
			residentOrderBO.setCurrentEstateXri(currentEstateXri);
			 
			 response = residentOrderBO.createResidentOrder(order);
			 
			 
			 if (!response.getResult())
			 {
				  logger.severe(" unable to create resident order ! "); 
		     	   
		     	  throw new BadRequestException(response);
			 }
			 else
			 {
				 return ResponseEntity.ok(response);
			 }
		}
		catch(BadRequestException e)
		{
			logger.info(" --- error : " + e.getResponse().getErrorMsg());
			
			response.setErrorMsg(e.getMessage());
			response.setResponse(e.getResponse().getErrorMsg());
			response.setResult(false);
			//e.setErrorMsg(e.getResponse());			
			return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
		} 
	}
	
	
	@GetMapping
	public ResponseEntity<?> getAllResOrders(HttpServletRequest request, @RequestParam int index, @RequestParam int range) 
	{
		
		logger.info(" -- getAllResOrders -- ");
		
		ResponseDTO response = new ResponseDTO();
		
		try
		{
			String provider = request.getHeader("provider");
			String tenantId = request.getHeader("tenant-id");
			String userId = request.getHeader("user-id");
			String currentEstateXri = request.getHeader("current-estate-xri");
			
			residentOrderBO.setCredentials(provider, tenantId, userId);
			residentOrderBO.setCurrentEstateXri(currentEstateXri);
			
//			residentOrderBO.setActivityTypeId(requestDTO.getActivityTypeId());
			
			response = residentOrderBO.getAllResidentOrders(index, range);
			
			if(!response.getResult())
			{
				logger.severe(" unable to get all the resident orders --- ");
				
				throw new BadRequestException(response);
			}
			
			//List<ResidentOrderListDTO> resOrderList = (List<ResidentOrderListDTO>) response.getResponse();
			
			return ResponseEntity.ok(response);
		}
		catch(BadRequestException e)
		{
			logger.info(" --- error : " + e.getResponse().getErrorMsg());
			
			response.setErrorMsg(e.getMessage());
			response.setResponse(e.getResponse().getErrorMsg());
			response.setResult(false);
			//e.setErrorMsg(e.getResponse());			
			return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
		}
		
		
	}
	
	
	@GetMapping("/count")	
	public ResponseEntity<Long> getResOrdersSize(HttpServletRequest request) 
	{
		
		logger.info(" -- getResOrders count -- ");
		
		String provider = request.getHeader("provider");
		String tenantId = request.getHeader("tenant-id");
		String userId = request.getHeader("user-id");
		String currentEstateXri = request.getHeader("current-estate-xri");
		
		long resOrderCount = 0;
		
		residentOrderBO.setCredentials(provider, tenantId, userId);
		residentOrderBO.setCurrentEstateXri(currentEstateXri);
		
		resOrderCount = residentOrderBO.getAllResidentOrdersSize();
		
		//return null;
		
		return ResponseEntity.ok(resOrderCount);
	}
	
	
	@GetMapping("/{id}")
	public ResponseEntity<?> getResidentOrder(HttpServletRequest request, @PathVariable String id)
	{	
		logger.info(" -- getResidentOrder -- ");
	
		ResponseDTO response = new ResponseDTO();
		
		try
		{
			String provider = request.getHeader("provider");
			String tenantId = request.getHeader("tenant-id");
			String userId = request.getHeader("user-id");
			String currentEstateXri = request.getHeader("current-estate-xri");
			
			residentOrderBO.setCredentials(provider, tenantId, userId);
			residentOrderBO.setCurrentEstateXri(currentEstateXri);
			
			//String generatedUri = baseUri + "/provider/" + provider + "/segment/" + segment + "/activity/" + id.trim();
			
			//logger.info(" generated Uri: " + generatedUri);
			
			
			response = residentOrderBO.getResidentOrder(id);
			
			if(!response.getResult())
			{
				logger.info(" --- unable to get resident order: " + response.getErrorMsg());
				
				throw new BadRequestException(response);
			}
						
			return ResponseEntity.ok(response);
		}
		catch(BadRequestException e)
		{
			logger.info(" --- error : " + e.getResponse().getErrorMsg());
			
			response.setErrorMsg(e.getMessage());
			response.setResponse(e.getResponse().getErrorMsg());
			response.setResult(false);
			//e.setErrorMsg(e.getResponse());			
			return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
		}	
	}
	
	
	@PutMapping("/{id}")
	public ResponseEntity<?> updateResidentOrder(HttpServletRequest request, @Valid @RequestBody ResidentOrderDTO residentOrder, @PathVariable String id)
	{
		
		logger.info(" -- updateResidentOrder() -- ");
		
		ResponseDTO response = new ResponseDTO();
		
		try
		{
			String provider = request.getHeader("provider");
			String tenantId = request.getHeader("tenant-id");
			String userId = request.getHeader("user-id");
			String currentEstateXri = request.getHeader("current-estate-xri");
			
			residentOrderBO.setCredentials(provider, tenantId, userId);
			residentOrderBO.setCurrentEstateXri(currentEstateXri);
			
			PrimaryKey pk = new PrimaryKey(id);
			
			residentOrder.setKey(pk);
			
			response = residentOrderBO.updateResidentOrder(residentOrder);
			
			
			     if (!response.getResult())
			     {  	    		 
			    	 logger.severe(" unable to update resident ! "); 
			     	   
			     	  throw new BadRequestException(response);		        
			     }
		    	 else
		    	 {
		    		 return ResponseEntity.ok(response);
		    	 }
		}
		catch(BadRequestException e)
		{
			logger.info(" --- error : " + e.getResponse().getErrorMsg());
			
			response.setErrorMsg(e.getMessage());
			response.setResponse(e.getResponse().getErrorMsg());
			response.setResult(false);
			//e.setErrorMsg(e.getResponse());			
			return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
		}
	}
	
	
	@PostMapping("/follow-up")
	public ResponseEntity<?> doResidentOrderFollowUp(HttpServletRequest request, @Valid @RequestBody FollowUpDTO followUp)
	{
		logger.info(" --- doResidentOrderFollowUp() --- ");
		
		ResponseDTO response = new ResponseDTO();
		
		try
		{
			String provider = request.getHeader("provider");
			String tenantId = request.getHeader("tenant-id");
			String userId = request.getHeader("user-id");
			String currentEstateXri = request.getHeader("current-estate-xri");
			
			residentOrderBO.setCredentials(provider, tenantId, userId);
			residentOrderBO.setCurrentEstateXri(currentEstateXri);
			
			response = residentOrderBO.doResidentOrderFollowUp(followUp);
			
			if (!response.getResult())
		     {  	    		 
		    	 logger.severe(" unable to do follow up ! "); 
		     	   
		     	  throw new BadRequestException(response);		        
		     }
	   	 	else
	   	 	{
	   	 		return ResponseEntity.ok(response);
	   	 	}
		}
		catch(BadRequestException e)
		{
			logger.info(" --- error : " + e.getResponse().getErrorMsg());
			
			response.setErrorMsg(e.getMessage());
			response.setResponse(e.getResponse().getErrorMsg());
			response.setResult(false);
			//e.setErrorMsg(e.getResponse());			
			return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
		}
	}
	
}
