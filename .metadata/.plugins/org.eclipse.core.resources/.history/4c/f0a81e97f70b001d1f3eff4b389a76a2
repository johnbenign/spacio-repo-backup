package com.spacio.fm;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

import com.google.common.collect.Lists;

import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.ApiKey;
import springfox.documentation.service.AuthorizationScope;
import springfox.documentation.service.SecurityReference;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spi.service.contexts.SecurityContext;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

@SpringBootApplication
(scanBasePackages={"com.spacio.crx", "com.spacio.mdx","com.spacio.fm"})
@EnableSwagger2
@EnableWebMvc
public class SpacioFmWebApplication implements WebMvcConfigurer{

	public static void main(String[] args) {
		SpringApplication.run(SpacioFmWebApplication.class, args);
	}
	
	@Bean
    public Docket api() {
        return new Docket(DocumentationType.SWAGGER_2).select()
                .apis(RequestHandlerSelectors.any()).paths(PathSelectors.any()).build()
                .apiInfo(apiInfo());

    }
	
	private ApiInfo apiInfo() {
        return new ApiInfoBuilder().title("Spacio FM Documenntation")
                .description("Development In Progress").version("1.0").build();

    }
	
	private SecurityContext securityContext() {

        return SecurityContext.builder().securityReferences(defaultAuth())

                .forPaths(PathSelectors.any()).build();

    }
	
	private List<SecurityReference> defaultAuth() {
        AuthorizationScope authorizationScope = new AuthorizationScope("global",
                "accessEverything");

        AuthorizationScope[] authorizationScopes = new AuthorizationScope[1];
        authorizationScopes[0] = authorizationScope;
        return Collections.singletonList(new SecurityReference("Bearer", authorizationScopes));

    }
	
	private ApiKey apiKey() {

        return new ApiKey("Bearer", "Authorization", "header");

    }

}
