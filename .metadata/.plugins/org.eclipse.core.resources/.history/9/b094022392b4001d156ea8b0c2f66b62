package com.spacio.fm.controller.activity;

import java.util.logging.Logger;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.spacio.crx.dto.PrimaryKey;
import com.spacio.crx.dto.ResponseDTO;
import com.spacio.fm.core.activity.bo.WorkOrderBO;
import com.spacio.fm.core.activity.dto.CreateWorkOrderDTO;
import com.spacio.fm.core.activity.dto.CreateWorkOrderTasksDTO;
import com.spacio.fm.core.activity.dto.FollowUpDTO;
import com.spacio.fm.core.activity.dto.GetWorkOrdersDTO;
import com.spacio.fm.core.activity.dto.WorkOrderDTO;
import com.spacio.fm.core.activity.dto.WorkOrderFollowUpDTO;
import com.spacio.fm.exception.BadRequestException;

@RestController
@CrossOrigin
@RequestMapping("/api/workorders")
public class WorkOrderController
{
	private static final Logger logger = Logger.getLogger(WorkOrderController.class.getName());

	@Value("${provider}")
	private String provider;

	@Autowired
	private WorkOrderBO workOrderBO;

	public WorkOrderController() {
		logger.info(" -- WorkOrderController() -- ");
	}

	@PostMapping
	public ResponseEntity<?> createWorkOrder(HttpServletRequest request, @Valid @RequestBody CreateWorkOrderDTO workOrder)
	{

		logger.info(" -- createWorkOrder -- ");

		ResponseDTO response = new ResponseDTO();
		
		try
		{
			String provider = request.getHeader("provider");
			String tenantId = request.getHeader("tenant-id");
			String userId = request.getHeader("user-id");
			
			workOrderBO.setCredentials(provider, tenantId, userId);
			
			response = workOrderBO.createWorkOrder(workOrder);

			if (!response.getResult()) {
				logger.severe(" unable to create work order ! ");

				throw new BadRequestException(response);
			} else {
				return ResponseEntity.ok(response);
			}
		}
		catch(BadRequestException e)
		{
			logger.info(" --- error : " + e.getResponse().getErrorMsg());
			
			response.setErrorMsg(e.getMessage());
			response.setResponse(e.getResponse().getErrorMsg());
			response.setResult(false);
			//e.setErrorMsg(e.getResponse());			
			return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
		}
	}
	
	@PostMapping("/create-tasks")
	public ResponseEntity<?> createWorkOrderTask(HttpServletRequest request, @Valid @RequestBody CreateWorkOrderTasksDTO workOrderTask)
	{

		logger.info(" -- createWorkOrderTask -- ");
		
		ResponseDTO response = new ResponseDTO();
		
		try
		{
			String provider = request.getHeader("provider");
			String tenantId = request.getHeader("tenant-id");
			String userId = request.getHeader("user-id");
			
			workOrderBO.setCredentials(provider, tenantId, userId);
			
			response = workOrderBO.createWorkOrderTasks(workOrderTask.getWorkOrderTasks(), workOrderTask.getWorkOrderXri());

			if (!response.getResult()) {
				logger.severe(" unable to create work order tasks! ");

				throw new BadRequestException(response);
			} else {
				return ResponseEntity.ok(response);
			}
		}
		catch(BadRequestException e)
		{
			logger.info(" --- error : " + e.getResponse().getErrorMsg());
			
			response.setErrorMsg(e.getMessage());
			response.setResponse(e.getResponse().getErrorMsg());
			response.setResult(false);
			//e.setErrorMsg(e.getResponse());			
			return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
		}
	}

	@GetMapping
	public ResponseEntity<?> getAllWorkOrders(HttpServletRequest request, @RequestParam int index, @RequestParam int range) {

		logger.info(" -- getAllWorkOrders -- ");
		
		ResponseDTO response = new ResponseDTO();
		
		try
		{
			String provider = request.getHeader("provider");
			String tenantId = request.getHeader("tenant-id");
			String userId = request.getHeader("user-id");
			
			workOrderBO.setCredentials(provider, tenantId, userId);
			
			response = workOrderBO.getAllWorkOrders(index, range);

			if (!response.getResult()) {
				logger.severe(" unable to get all the work orders --- ");

				throw new BadRequestException(response);
			}

			// List<ResidentOrderListDTO> resOrderList = (List<ResidentOrderListDTO>)
			// response.getResponse();

			return ResponseEntity.ok(response);
		}
		catch(BadRequestException e)
		{
			logger.info(" --- error : " + e.getResponse().getErrorMsg());
			
			response.setErrorMsg(e.getMessage());
			response.setResponse(e.getResponse().getErrorMsg());
			response.setResult(false);
			//e.setErrorMsg(e.getResponse());			
			return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
		}
	}

	@GetMapping("/count")
	public ResponseEntity<Long> getWorkOrdersSize(HttpServletRequest request) {

		logger.info(" -- getWorkOrdersSize count -- ");
		
		String provider = request.getHeader("provider");
		String tenantId = request.getHeader("tenant-id");
		String userId = request.getHeader("user-id");
		
		long workOrderCount = 0;
		
		workOrderBO.setCredentials(provider, tenantId, userId);

		workOrderCount = workOrderBO.getAllWorkOrdersSize();

		// return null;

		return ResponseEntity.ok(workOrderCount);
	}

	@GetMapping("/{id}")
	public ResponseEntity<?> getWorkOrder(HttpServletRequest request, @PathVariable String id) {

		logger.info(" -- getWorkOrder -- ");
		
		ResponseDTO response = new ResponseDTO();
		
		try
		{
			String provider = request.getHeader("provider");
			String tenantId = request.getHeader("tenant-id");
			String userId = request.getHeader("user-id");
			
			workOrderBO.setCredentials(provider, tenantId, userId);
			
			// String generatedUri = baseUri + "/provider/" + provider + "/segment/" +
			// segment + "/activity/" + id.trim();

			// logger.info(" generated Uri: " + generatedUri);

			response = workOrderBO.getWorkOrder(id);

			if (!response.getResult()) {
				logger.info(" --- unable to get work order by id: " + response.getErrorMsg());

				throw new BadRequestException(response);
			}

			WorkOrderDTO workOrder = (WorkOrderDTO) response.getResponse();

			return ResponseEntity.ok(workOrder);
		}
		catch(BadRequestException e)
		{
			logger.info(" --- error : " + e.getResponse().getErrorMsg());
			
			response.setErrorMsg(e.getMessage());
			response.setResponse(e.getResponse().getErrorMsg());
			response.setResult(false);
			//e.setErrorMsg(e.getResponse());			
			return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
		}
	}

	@PutMapping("/{id}")
	public ResponseEntity<?> updateWorkOrder(HttpServletRequest request, @Valid @RequestBody WorkOrderDTO workOrder, @PathVariable("id") String workOrderId) {

		logger.info(" -- updateWorkOrder() -- ");
		
		ResponseDTO response = new ResponseDTO();
		
		try
		{
			String provider = request.getHeader("provider");
			String tenantId = request.getHeader("tenant-id");
			String userId = request.getHeader("user-id");
			
			PrimaryKey workOrderPK = new PrimaryKey(workOrderId);
			
			workOrder.setKey(workOrderPK);

			workOrderBO.setCredentials(provider, tenantId, userId);

			response = workOrderBO.updateWorkOrder(workOrder);

			if (!response.getResult()) {
				logger.severe(" unable to update work order ! ");

				throw new BadRequestException(response);
			} else {
				return ResponseEntity.ok(response);
			}
		}
		catch(BadRequestException e)
		{
			logger.info(" --- error : " + e.getResponse().getErrorMsg());
			
			response.setErrorMsg(e.getMessage());
			response.setResponse(e.getResponse().getErrorMsg());
			response.setResult(false);
			//e.setErrorMsg(e.getResponse());			
			return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
		}
	}
	
	@PostMapping("/follow-up")
	public ResponseEntity<?> doWorkOrderFollowUp(HttpServletRequest request, @Valid @RequestBody WorkOrderFollowUpDTO followUp)
	{
		logger.info(" --- doWorkOrderFollowUp() --- ");
		
		ResponseDTO response = new ResponseDTO();
		
		try
		{
			String provider = request.getHeader("provider");
			String tenantId = request.getHeader("tenant-id");
			String userId = request.getHeader("user-id");
			
			workOrderBO.setCredentials(provider, tenantId, userId);
			
			response = workOrderBO.doWorkOrderFollowUp(followUp);
			
			if (!response.getResult())
		     {  	    		 
		    	 logger.severe(" unable to do follow up ! "); 
		     	   
		     	  throw new BadRequestException(response);		        
		     }
	   	 	else
	   	 	{
	   	 		return ResponseEntity.ok(response);
	   	 	}
		}
		catch(BadRequestException e)
		{
			logger.info(" --- error : " + e.getResponse().getErrorMsg());
			
			response.setErrorMsg(e.getMessage());
			response.setResponse(e.getResponse().getErrorMsg());
			response.setResult(false);
			//e.setErrorMsg(e.getResponse());			
			return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
		}
	}
	
	@PostMapping("/task-follow-up")
	public ResponseEntity<?> doWorkOrderTaskFollowUp(HttpServletRequest request, @Valid @RequestBody FollowUpDTO followUp)
	{
		logger.info(" --- doWorkOrderTaskFollowUp() --- ");
		
		ResponseDTO response = new ResponseDTO();
		
		try
		{
			String provider = request.getHeader("provider");
			String tenantId = request.getHeader("tenant-id");
			String userId = request.getHeader("user-id");
			
			workOrderBO.setCredentials(provider, tenantId, userId);
			
			response = workOrderBO.doWorkOrderTasksFollowUp(followUp);
			
			if (!response.getResult())
		     {  	    		 
		    	 logger.severe(" unable to do follow up ! "); 
		     	   
		     	  throw new BadRequestException(response);		        
		     }
	   	 	else
	   	 	{
	   	 		return ResponseEntity.ok(response);
	   	 	}
		}
		catch(BadRequestException e)
		{
			logger.info(" --- error : " + e.getResponse().getErrorMsg());
			
			response.setErrorMsg(e.getMessage());
			response.setResponse(e.getResponse().getErrorMsg());
			response.setResult(false);
			//e.setErrorMsg(e.getResponse());			
			return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
		}
	}
	
	@GetMapping("/active-workorders")
	public ResponseEntity<?> getAllActiveWorkOrders(HttpServletRequest request)
	{
		logger.info(" --- getAllActiveWorkOrders() --- ");
		
		ResponseDTO response = new ResponseDTO();
		
		try
		{
			String provider = request.getHeader("provider");
			String tenantId = request.getHeader("tenant-id");
			String userId = request.getHeader("user-id");
			
			workOrderBO.setCredentials(provider, tenantId, userId);
			
			response = workOrderBO.getAllActiveWorkOrders();
			
			if (!response.getResult())
		     {  	    		 
		    	 logger.severe("failed to get active work orders ! "); 
		     	   
		     	  throw new BadRequestException(response);		        
		     }
	   	 	else
	   	 	{
	   	 		return ResponseEntity.ok(response);
	   	 	}
		}
		catch(BadRequestException e)
		{
			logger.info(" --- error : " + e.getResponse().getErrorMsg());
			
			response.setErrorMsg(e.getMessage());
			response.setResponse(e.getResponse().getErrorMsg());
			response.setResult(false);
			//e.setErrorMsg(e.getResponse());			
			return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
		}
	}
	
	@GetMapping("/completed-workorders")
	public ResponseEntity<?> getAllCompletedWorkOrders(HttpServletRequest request)
	{
		logger.info(" --- getAllCompletedWorkOrders() --- ");
		
		ResponseDTO response = new ResponseDTO();
		
		try
		{
			String provider = request.getHeader("provider");
			String tenantId = request.getHeader("tenant-id");
			String userId = request.getHeader("user-id");
			
			workOrderBO.setCredentials(provider, tenantId, userId);
			
			response = workOrderBO.getAllCompletedWorkOrders();
			
			if (!response.getResult())
		     {  	    		 
		    	 logger.severe("failed to get completed work orders ! "); 
		     	   
		     	  throw new BadRequestException(response);		        
		     }
	   	 	else
	   	 	{
	   	 		return ResponseEntity.ok(response);
	   	 	}
		}
		catch(BadRequestException e)
		{
			logger.info(" --- error : " + e.getResponse().getErrorMsg());
			
			response.setErrorMsg(e.getMessage());
			response.setResponse(e.getResponse().getErrorMsg());
			response.setResult(false);
			//e.setErrorMsg(e.getResponse());			
			return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
		}
	}
	
	@GetMapping("/suspended-workorders")
	public ResponseEntity<?> getAllSuspendedWorkOrders(HttpServletRequest request)
	{
		logger.info(" --- getAllSuspendedWorkOrders() --- ");
		
		ResponseDTO response = new ResponseDTO();
		
		try
		{
			String provider = request.getHeader("provider");
			String tenantId = request.getHeader("tenant-id");
			String userId = request.getHeader("user-id");
			
			workOrderBO.setCredentials(provider, tenantId, userId);
			
			response = workOrderBO.getAllSuspendedWorkOrders();
			
			if (!response.getResult())
		     {  	    		 
		    	 logger.severe("failed to get suspended work orders ! "); 
		     	   
		     	  throw new BadRequestException(response);		        
		     }
	   	 	else
	   	 	{
	   	 		return ResponseEntity.ok(response);
	   	 	}
		}
		catch(BadRequestException e)
		{
			logger.info(" --- error : " + e.getResponse().getErrorMsg());
			
			response.setErrorMsg(e.getMessage());
			response.setResponse(e.getResponse().getErrorMsg());
			response.setResult(false);
			//e.setErrorMsg(e.getResponse());			
			return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
		}
	}
}
