package com.spacio.crx.test;

import static org.junit.jupiter.api.Assertions.*;

import java.util.Collections;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.jdo.PersistenceManagerFactory;
import javax.naming.spi.NamingManager;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.opencrx.kernel.utils.Utils;
import org.openmdx.kernel.lightweight.naming.NonManagedInitialContextFactoryBuilder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Scope;

import com.spacio.crx.bo.ConfigBO;
import com.spacio.crx.dto.ConfigDTO;

@SpringBootTest
class ConfigTest {
	
	private static final Logger logger = Logger.getLogger(ConfigTest.class.getName());
	
	@Autowired
	private ConfigBO configBO;
	
	
	private String provider = "CRX";
	
	private String segment = "Test25";
	
	private String userId = "admin-Test25";
	

	@BeforeEach
	void setUp() throws Exception 
	{
		
		logger.info(" provider: " + provider + " segment:" + segment  + " user id: " + userId);
	}

	
	
	@TestConfiguration
    static class PMFConfiguration 
    {
 
		@Value("${db.url}")
		private String dbUrl;
		
		
		@Bean("crxCustomPMF")
		@Scope(value = "singleton")
		public PersistenceManagerFactory producePersistenceManagerFactory()
		{

			logger.info(" -------- producePersistenceManagerFactory ------- ");

			PersistenceManagerFactory pmf = initPMF();

			return pmf;
		}
		
		
		private PersistenceManagerFactory initPMF()
		{

			logger.info(" -------- initPMF ------- ");

			PersistenceManagerFactory pmf = null;

			try {

				initContextFactory(dbUrl);

				pmf = Utils.getPersistenceManagerFactory();

				logger.info(" pmf initialised locally  !");

			} catch (Exception e) {

				logger.severe(" error: " + e.getMessage());

				logger.log(Level.SEVERE, " error initialising local pmf ! ", e);

				// new ServiceException(e).log();
			}

			return pmf;
		}

		
		
		 private void initContextFactory(String dbUrl) 
		 {
			  
			  logger.info(" -----  initContextFactory ------ ");
			  
			  logger.info(" db url: " + dbUrl);
			  
			  try {
			  
			  logger.info(" inside initContextFactory() ---");
			  
			  
			  if (!NamingManager.hasInitialContextFactoryBuilder())
			  {
			  
			  logger.info("---init non managed init context .... ---- ");
			  
			  
			  
			  
			  // local
			  
			  NonManagedInitialContextFactoryBuilder.install( Collections.singletonMap(
			  "org.openmdx.comp.env.jdbc_opencrx_CRX", dbUrl ) );
			  
			  
			  logger.info(" context has been initialised !");
			  
			  
				/*
				 * // remote amzaon NonManagedInitialContextFactoryBuilder.install(
				 * Collections.singletonMap( "org.openmdx.comp.env.jdbc_opencrx_CRX",
				 * "jdbc:sqlserver:\\/\\/spaciofm.cvjywuu0shvj.us-west-2.rds.amazonaws.com:1433;databaseName=spacio_fm2;selectMethod=cursor?user=crmuser&password=crmpass433&driver=com.microsoft.sqlserver.jdbc.SQLServerDriver"
				 * );
				 */
			  
			  } else { logger.info(" context has already been initialised !!! "); }
			  
			  } catch (Exception ex) {
			  
			  logger.severe(" error message: " + ex.getMessage());
			  
			  ex.printStackTrace();
			  
			  }
			  
			  
			  }
		
		
		
    }
	
	
	//@Test
	void loadConfig1()
	{
		
		// fail("Not yet implemented");
		
		String configName = "TENANT_JNDI";
		
		HashMap<String, Object> configurations = configBO.getComponentProperties(configName);
		
		
		 logger.info(" configurations: " + configurations);
		 
		 
	}
	
	
	
	
	
	
    @Test
    void findConfigKey()
    {        
        
        logger.info(" findConfigKey() ");
        
        configBO.setCredentials(provider, segment, userId);
        
        String key = "RESIDENT_ROLE_ID";
        
       ConfigDTO configDTO = configBO.findByKey(key);
       
        logger.info(" key: " + configDTO.getPropertyKey() + " value " + configDTO.getPropertyValue());
    
    }
	

}
